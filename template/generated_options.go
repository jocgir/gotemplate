// Code generated by "stringer -type=options -output generated_options.go"; DO NOT EDIT.

package template

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Razor-1]
	_ = x[Extension-2]
	_ = x[Math-4]
	_ = x[Sprig-8]
	_ = x[Data-16]
	_ = x[Logging-32]
	_ = x[Runtime-64]
	_ = x[Utils-128]
	_ = x[Net-256]
	_ = x[OS-512]
	_ = x[Git-1024]
	_ = x[Overwrite-2048]
	_ = x[OutputStdout-4096]
	_ = x[RenderingDisabled-8192]
	_ = x[AcceptNoValue-16384]
	_ = x[StrictErrorCheck-32768]
}

const _options_name = "RazorExtensionMathSprigDataLoggingRuntimeUtilsNetOSGitOverwriteOutputStdoutRenderingDisabledAcceptNoValueStrictErrorCheck"

var _options_map = map[ExtendedOption]string{
	1:     _options_name[0:5],
	2:     _options_name[5:14],
	4:     _options_name[14:18],
	8:     _options_name[18:23],
	16:    _options_name[23:27],
	32:    _options_name[27:34],
	64:    _options_name[34:41],
	128:   _options_name[41:46],
	256:   _options_name[46:49],
	512:   _options_name[49:51],
	1024:  _options_name[51:54],
	2048:  _options_name[54:63],
	4096:  _options_name[63:75],
	8192:  _options_name[75:92],
	16384: _options_name[92:105],
	32768: _options_name[105:121],
}

func (i ExtendedOption) String() string {
	if str, ok := _options_map[i]; ok {
		return str
	}
	return "options(" + strconv.FormatInt(int64(i), 10) + ")"
}
